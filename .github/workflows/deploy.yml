name: Deploy iGEM Media Gallery to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.upload_artifact.outputs.artifact_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: ''

      - name: Run rename script (optional)
        run: |
          if [ -f "$GITHUB_WORKSPACE/rename.py" ]; then
            echo "Running rename.py..."
            printf "2\ny\n" | python "$GITHUB_WORKSPACE/rename.py" || echo "⚠ rename.py failed, continue"
          elif [ -f "$GITHUB_WORKSPACE/rename_media.py" ]; then
            echo "Running rename_media.py..."
            printf "2\ny\n" | python "$GITHUB_WORKSPACE/rename_media.py" || echo "⚠ rename_media.py failed, continue"
          else
            echo "No rename script found, skipping"

      - name: Build gallery.html (scan ART/HP)
        run: |
          PYTHON_SCRIPT="$GITHUB_WORKSPACE/.build_gallery.py"
          cat > "$PYTHON_SCRIPT" << 'EOF'
import os
workspace = os.environ['GITHUB_WORKSPACE']
art_dir = os.path.join(workspace, 'ART')
hp_dir = os.path.join(workspace, 'HP')
gallery_path = os.path.join(workspace, 'gallery.html')

def make_gallery_section(title, folder):
    html = f'<div class="media-section"><h2 class="section-title">{title}</h2><div class="gallery">'
    if os.path.exists(folder):
        files = sorted(f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f)))
        if files:
            for f in files:
                ext = f.split('.')[-1].lower()
                if ext in ['jpg','jpeg','png','gif','mp4','webm']:
                    html += f'<div class="media-item"><a href="{title}/{f}">{f}</a></div>'
        else:
            html += '<div class="no-media">暂无媒体文件</div>'
    else:
        html += '<div class="no-media">目录不存在</div>'
    html += '</div></div>'
    return html

html_content = f'''<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SYPHU-CHINA iGEM Media Gallery</title>
<style>
body {{ font-family: Arial,sans-serif; margin:0; padding:20px; background:#f5f7fa; }}
.container {{ max-width:1200px; margin:0 auto; background:white; padding:30px; border-radius:10px; box-shadow:0 6px 18px rgba(0,0,0,0.08); }}
h1 {{ text-align:center; color:#2c3e50; }}
.section-title {{ color:#3498db; border-bottom:2px solid #3498db; padding-bottom:10px; margin-bottom:20px; }}
.gallery {{ display:grid; grid-template-columns:repeat(auto-fill,minmax(250px,1fr)); gap:20px; margin-top:20px; }}
.media-item {{ border:1px solid #e1e8ed; border-radius:8px; padding:15px; text-align:center; background:#f8f9fa; }}
.no-media {{ text-align:center; color:#95a5a6; font-style:italic; padding:20px; grid-column:1/-1; }}
</style>
</head>
<body>
<div class="container">
<h1>SYPHU-CHINA iGEM Media Gallery</h1>
{make_gallery_section("ART", art_dir)}
{make_gallery_section("HP", hp_dir)}
</div>
</body>
</html>
'''

with open(gallery_path, 'w', encoding='utf-8') as f:
    f.write(html_content)
EOF
          python "$PYTHON_SCRIPT"

      - name: Create index.html redirect
        run: |
          cat > "$GITHUB_WORKSPACE/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="refresh" content="0; url=gallery.html">
<title>SYPHU-CHINA iGEM Media Gallery</title>
</head>
<body>
<p>正在跳转到 <a href="gallery.html">gallery.html</a>...</p>
</body>
</html>
EOF

      - name: Prepare site folder
        run: |
          rm -rf "$GITHUB_WORKSPACE/site"
          mkdir -p "$GITHUB_WORKSPACE/site"
          cp "$GITHUB_WORKSPACE/gallery.html" "$GITHUB_WORKSPACE/index.html" "$GITHUB_WORKSPACE/site/"
          [ -d "$GITHUB_WORKSPACE/ART" ] && cp -r "$GITHUB_WORKSPACE/ART" "$GITHUB_WORKSPACE/site/"
          [ -d "$GITHUB_WORKSPACE/HP" ] && cp -r "$GITHUB_WORKSPACE/HP" "$GITHUB_WORKSPACE/site/"
          echo "site/ content:"
          ls -la "$GITHUB_WORKSPACE/site/"

      - name: Upload Pages artifact
        id: upload_artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "$GITHUB_WORKSPACE/site"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
